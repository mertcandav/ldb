// Copyright 2025 mertcandav.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use "std/testing"

struct scannerTest {
	data:   str
	tokens: []str
}

let scannerTests: []scannerTest = [
	{
		data: "\x00\x00",
		tokens: nil,
	},
	{
		data: "foo\x00\x00",
		tokens: ["foo"],
	},
	{
		data: "foo\x00bar\x00\x00",
		tokens: ["foo", "bar"],
	},
	{
		data: "foo\x00bar\x00\x00",
		tokens: ["foo", "bar"],
	},
	{
		data: "foo\x00bar\x00baz\x00\x00",
		tokens: ["foo", "bar", "baz"],
	},
	{
		data: "foo\x00 \x00\t\x00\x00",
		tokens: ["foo", " ", "\t"],
	},
	{
		data: "çşğü\x00√∫æ`~¨≤ß~∂\x00\t\x00\x00",
		tokens: ["çşğü", "√∫æ`~¨≤ß~∂", "\t"],
	},
]

#test
fn testScanner(t: &testing::T) {
Test:
	for i, test in scannerTests {
		mut scan := scanner.new([]byte(test.data))
		mut n := 0
		for {
			token := scan.scan()
			if token == nil {
				break
			}
			n++
			if n > len(test.tokens) {
				t.Errorf("#{} returns more token than expected", i)
				continue Test
			}
			expected := test.tokens[n-1]
			if str(token) != expected {
				t.Errorf("#{} returns unexpected token", i)
				continue Test
			}
		}
		if n < len(test.tokens) {
			t.Errorf("#{} returns lesss token than expected", i)
		}
	}
}